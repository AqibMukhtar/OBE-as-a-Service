{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\nimport http from \"./httpService\";\nimport { apiUrl } from \"../config.json\";\nconst apiEndPoint = apiUrl;\nconst tokenKey = \"token\"; // http.setJwt(getJwt());\n\nexport async function login(userName, password, type) {\n  const {\n    data: jwt\n  } = await http.post(apiEndPoint, {\n    userName,\n    password,\n    type\n  });\n  console.log(jwt);\n  return jwt; // if (Object.keys(jwt.data).length == 0) {\n  //   toast.error(\"Invalid username or password\");\n  // } else {\n  //   localStorage.setItem(tokenKey, jwt.data);\n  //   console.log(\"You have logged in successfully\");\n  //   // this.props.history.push(\"/\");\n  // }\n}\nexport function logout() {\n  localStorage.removeItem(tokenKey);\n}\nexport function getCurrentUser() {\n  try {\n    const jwt = localStorage.getItem(tokenKey);\n    return jwtDecode(jwt);\n  } catch (ex) {\n    return null;\n  }\n}\nexport function getJwt() {\n  const user = localStorage.getItem(tokenKey);\n  return user == null ? undefined : user;\n}\nexport default {\n  login,\n  logout,\n  getCurrentUser // getJwt,\n\n};","map":{"version":3,"sources":["D:/OBEaaS/gitOBEaaS/OBE-as-a-Service/Presentation/src/services/authService.js"],"names":["jwtDecode","http","apiUrl","apiEndPoint","tokenKey","login","userName","password","type","data","jwt","post","console","log","logout","localStorage","removeItem","getCurrentUser","getItem","ex","getJwt","user","undefined"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,MAAMC,WAAW,GAAGD,MAApB;AACA,MAAME,QAAQ,GAAG,OAAjB,C,CAEA;;AAEA,OAAO,eAAeC,KAAf,CAAqBC,QAArB,EAA+BC,QAA/B,EAAyCC,IAAzC,EAA+C;AACpD,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAgB,MAAMT,IAAI,CAACU,IAAL,CAAUR,WAAV,EAAuB;AACjDG,IAAAA,QADiD;AAEjDC,IAAAA,QAFiD;AAGjDC,IAAAA;AAHiD,GAAvB,CAA5B;AAKAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,SAAOA,GAAP,CAPoD,CAQpD;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAED,OAAO,SAASI,MAAT,GAAkB;AACvBC,EAAAA,YAAY,CAACC,UAAb,CAAwBZ,QAAxB;AACD;AAED,OAAO,SAASa,cAAT,GAA0B;AAC/B,MAAI;AACF,UAAMP,GAAG,GAAGK,YAAY,CAACG,OAAb,CAAqBd,QAArB,CAAZ;AACA,WAAOJ,SAAS,CAACU,GAAD,CAAhB;AACD,GAHD,CAGE,OAAOS,EAAP,EAAW;AACX,WAAO,IAAP;AACD;AACF;AAED,OAAO,SAASC,MAAT,GAAkB;AACvB,QAAMC,IAAI,GAAGN,YAAY,CAACG,OAAb,CAAqBd,QAArB,CAAb;AACA,SAAOiB,IAAI,IAAI,IAAR,GAAeC,SAAf,GAA2BD,IAAlC;AACD;AAED,eAAe;AACbhB,EAAAA,KADa;AAEbS,EAAAA,MAFa;AAGbG,EAAAA,cAHa,CAIb;;AAJa,CAAf","sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport http from \"./httpService\";\r\nimport { apiUrl } from \"../config.json\";\r\n\r\nconst apiEndPoint = apiUrl;\r\nconst tokenKey = \"token\";\r\n\r\n// http.setJwt(getJwt());\r\n\r\nexport async function login(userName, password, type) {\r\n  const { data: jwt } = await http.post(apiEndPoint, {\r\n    userName,\r\n    password,\r\n    type,\r\n  });\r\n  console.log(jwt);\r\n  return jwt;\r\n  // if (Object.keys(jwt.data).length == 0) {\r\n  //   toast.error(\"Invalid username or password\");\r\n  // } else {\r\n  //   localStorage.setItem(tokenKey, jwt.data);\r\n  //   console.log(\"You have logged in successfully\");\r\n  //   // this.props.history.push(\"/\");\r\n  // }\r\n}\r\n\r\nexport function logout() {\r\n  localStorage.removeItem(tokenKey);\r\n}\r\n\r\nexport function getCurrentUser() {\r\n  try {\r\n    const jwt = localStorage.getItem(tokenKey);\r\n    return jwtDecode(jwt);\r\n  } catch (ex) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function getJwt() {\r\n  const user = localStorage.getItem(tokenKey);\r\n  return user == null ? undefined : user;\r\n}\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  // getJwt,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}